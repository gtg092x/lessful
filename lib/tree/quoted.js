"use strict";

var Node = require("./node");

var Quoted = function Quoted(str, content, escaped, index, currentFileInfo) {
    this.escaped = escaped == null ? true : escaped;
    this.value = content || '';
    this.quote = str.charAt(0);
    this._index = index;
    this._fileInfo = currentFileInfo;
};
Quoted.prototype = new Node();
Quoted.prototype.type = "Quoted";
Quoted.prototype.genCSS = function (context, output) {
    if (!this.escaped) {
        output.add(this.quote);
    }
    output.add(this.value);
    if (!this.escaped) {
        output.add(this.quote);
    }
};
Quoted.prototype.containsVariables = function () {
    return this.value.match(/(`([^`]+)`)|@\{([\w-]+)\}/);
};
Quoted.prototype.eval = function (context) {
    var that = this,
        value = this.value;
    return new Quoted(this.quote + value + this.quote, value, this.escaped);
};
Quoted.prototype.compare = function (other) {
    // when comparing quoted strings allow the quote to differ
    if (other.type === "Quoted" && !this.escaped && !other.escaped) {
        return Node.numericCompare(this.value, other.value);
    } else {
        return other.toCSS && this.toCSS() === other.toCSS() ? 0 : undefined;
    }
};
module.exports = Quoted;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90cmVlL3F1b3RlZC5qcyJdLCJuYW1lcyI6WyJOb2RlIiwicmVxdWlyZSIsIlF1b3RlZCIsInN0ciIsImNvbnRlbnQiLCJlc2NhcGVkIiwiaW5kZXgiLCJjdXJyZW50RmlsZUluZm8iLCJ2YWx1ZSIsInF1b3RlIiwiY2hhckF0IiwiX2luZGV4IiwiX2ZpbGVJbmZvIiwicHJvdG90eXBlIiwidHlwZSIsImdlbkNTUyIsImNvbnRleHQiLCJvdXRwdXQiLCJhZGQiLCJjb250YWluc1ZhcmlhYmxlcyIsIm1hdGNoIiwiZXZhbCIsInRoYXQiLCJjb21wYXJlIiwib3RoZXIiLCJudW1lcmljQ29tcGFyZSIsInRvQ1NTIiwidW5kZWZpbmVkIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxPQUFPQyxRQUFRLFFBQVIsQ0FBWDs7QUFFQSxJQUFJQyxTQUFTLFNBQVRBLE1BQVMsQ0FBVUMsR0FBVixFQUFlQyxPQUFmLEVBQXdCQyxPQUF4QixFQUFpQ0MsS0FBakMsRUFBd0NDLGVBQXhDLEVBQXlEO0FBQ2xFLFNBQUtGLE9BQUwsR0FBZ0JBLFdBQVcsSUFBWixHQUFvQixJQUFwQixHQUEyQkEsT0FBMUM7QUFDQSxTQUFLRyxLQUFMLEdBQWFKLFdBQVcsRUFBeEI7QUFDQSxTQUFLSyxLQUFMLEdBQWFOLElBQUlPLE1BQUosQ0FBVyxDQUFYLENBQWI7QUFDQSxTQUFLQyxNQUFMLEdBQWNMLEtBQWQ7QUFDQSxTQUFLTSxTQUFMLEdBQWlCTCxlQUFqQjtBQUNILENBTkQ7QUFPQUwsT0FBT1csU0FBUCxHQUFtQixJQUFJYixJQUFKLEVBQW5CO0FBQ0FFLE9BQU9XLFNBQVAsQ0FBaUJDLElBQWpCLEdBQXdCLFFBQXhCO0FBQ0FaLE9BQU9XLFNBQVAsQ0FBaUJFLE1BQWpCLEdBQTBCLFVBQVVDLE9BQVYsRUFBbUJDLE1BQW5CLEVBQTJCO0FBQ2pELFFBQUksQ0FBQyxLQUFLWixPQUFWLEVBQW1CO0FBQ2ZZLGVBQU9DLEdBQVAsQ0FBVyxLQUFLVCxLQUFoQjtBQUNIO0FBQ0RRLFdBQU9DLEdBQVAsQ0FBVyxLQUFLVixLQUFoQjtBQUNBLFFBQUksQ0FBQyxLQUFLSCxPQUFWLEVBQW1CO0FBQ2ZZLGVBQU9DLEdBQVAsQ0FBVyxLQUFLVCxLQUFoQjtBQUNIO0FBQ0osQ0FSRDtBQVNBUCxPQUFPVyxTQUFQLENBQWlCTSxpQkFBakIsR0FBcUMsWUFBVztBQUM1QyxXQUFPLEtBQUtYLEtBQUwsQ0FBV1ksS0FBWCxDQUFpQiwyQkFBakIsQ0FBUDtBQUNILENBRkQ7QUFHQWxCLE9BQU9XLFNBQVAsQ0FBaUJRLElBQWpCLEdBQXdCLFVBQVVMLE9BQVYsRUFBbUI7QUFDdkMsUUFBSU0sT0FBTyxJQUFYO0FBQUEsUUFBaUJkLFFBQVEsS0FBS0EsS0FBOUI7QUFDQSxXQUFPLElBQUlOLE1BQUosQ0FBVyxLQUFLTyxLQUFMLEdBQWFELEtBQWIsR0FBcUIsS0FBS0MsS0FBckMsRUFBNENELEtBQTVDLEVBQW1ELEtBQUtILE9BQXhELENBQVA7QUFDSCxDQUhEO0FBSUFILE9BQU9XLFNBQVAsQ0FBaUJVLE9BQWpCLEdBQTJCLFVBQVVDLEtBQVYsRUFBaUI7QUFDeEM7QUFDQSxRQUFJQSxNQUFNVixJQUFOLEtBQWUsUUFBZixJQUEyQixDQUFDLEtBQUtULE9BQWpDLElBQTRDLENBQUNtQixNQUFNbkIsT0FBdkQsRUFBZ0U7QUFDNUQsZUFBT0wsS0FBS3lCLGNBQUwsQ0FBb0IsS0FBS2pCLEtBQXpCLEVBQWdDZ0IsTUFBTWhCLEtBQXRDLENBQVA7QUFDSCxLQUZELE1BRU87QUFDSCxlQUFPZ0IsTUFBTUUsS0FBTixJQUFlLEtBQUtBLEtBQUwsT0FBaUJGLE1BQU1FLEtBQU4sRUFBaEMsR0FBZ0QsQ0FBaEQsR0FBb0RDLFNBQTNEO0FBQ0g7QUFDSixDQVBEO0FBUUFDLE9BQU9DLE9BQVAsR0FBaUIzQixNQUFqQiIsImZpbGUiOiJxdW90ZWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgTm9kZSA9IHJlcXVpcmUoXCIuL25vZGVcIik7XG5cbnZhciBRdW90ZWQgPSBmdW5jdGlvbiAoc3RyLCBjb250ZW50LCBlc2NhcGVkLCBpbmRleCwgY3VycmVudEZpbGVJbmZvKSB7XG4gICAgdGhpcy5lc2NhcGVkID0gKGVzY2FwZWQgPT0gbnVsbCkgPyB0cnVlIDogZXNjYXBlZDtcbiAgICB0aGlzLnZhbHVlID0gY29udGVudCB8fCAnJztcbiAgICB0aGlzLnF1b3RlID0gc3RyLmNoYXJBdCgwKTtcbiAgICB0aGlzLl9pbmRleCA9IGluZGV4O1xuICAgIHRoaXMuX2ZpbGVJbmZvID0gY3VycmVudEZpbGVJbmZvO1xufTtcblF1b3RlZC5wcm90b3R5cGUgPSBuZXcgTm9kZSgpO1xuUXVvdGVkLnByb3RvdHlwZS50eXBlID0gXCJRdW90ZWRcIjtcblF1b3RlZC5wcm90b3R5cGUuZ2VuQ1NTID0gZnVuY3Rpb24gKGNvbnRleHQsIG91dHB1dCkge1xuICAgIGlmICghdGhpcy5lc2NhcGVkKSB7XG4gICAgICAgIG91dHB1dC5hZGQodGhpcy5xdW90ZSk7XG4gICAgfVxuICAgIG91dHB1dC5hZGQodGhpcy52YWx1ZSk7XG4gICAgaWYgKCF0aGlzLmVzY2FwZWQpIHtcbiAgICAgICAgb3V0cHV0LmFkZCh0aGlzLnF1b3RlKTtcbiAgICB9XG59O1xuUXVvdGVkLnByb3RvdHlwZS5jb250YWluc1ZhcmlhYmxlcyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnZhbHVlLm1hdGNoKC8oYChbXmBdKylgKXxAXFx7KFtcXHctXSspXFx9Lyk7XG59O1xuUXVvdGVkLnByb3RvdHlwZS5ldmFsID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICB2YXIgdGhhdCA9IHRoaXMsIHZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICByZXR1cm4gbmV3IFF1b3RlZCh0aGlzLnF1b3RlICsgdmFsdWUgKyB0aGlzLnF1b3RlLCB2YWx1ZSwgdGhpcy5lc2NhcGVkKTtcbn07XG5RdW90ZWQucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICAvLyB3aGVuIGNvbXBhcmluZyBxdW90ZWQgc3RyaW5ncyBhbGxvdyB0aGUgcXVvdGUgdG8gZGlmZmVyXG4gICAgaWYgKG90aGVyLnR5cGUgPT09IFwiUXVvdGVkXCIgJiYgIXRoaXMuZXNjYXBlZCAmJiAhb3RoZXIuZXNjYXBlZCkge1xuICAgICAgICByZXR1cm4gTm9kZS5udW1lcmljQ29tcGFyZSh0aGlzLnZhbHVlLCBvdGhlci52YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG90aGVyLnRvQ1NTICYmIHRoaXMudG9DU1MoKSA9PT0gb3RoZXIudG9DU1MoKSA/IDAgOiB1bmRlZmluZWQ7XG4gICAgfVxufTtcbm1vZHVsZS5leHBvcnRzID0gUXVvdGVkO1xuIl19