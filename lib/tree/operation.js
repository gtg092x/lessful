"use strict";

var Node = require("./node"),
    Color = require("./color"),
    Dimension = require("./dimension");

var Operation = function Operation(op, operands, isSpaced) {
    this.op = op.trim();
    this.operands = operands;
    this.isSpaced = isSpaced;
};
Operation.prototype = new Node();
Operation.prototype.type = "Operation";
Operation.prototype.accept = function (visitor) {
    this.operands = visitor.visit(this.operands);
};
Operation.prototype.eval = function (context) {
    var a = this.operands[0].eval(context),
        b = this.operands[1].eval(context);

    if (context.isMathOn()) {
        if (a instanceof Dimension && b instanceof Color) {
            a = a.toColor();
        }
        if (b instanceof Dimension && a instanceof Color) {
            b = b.toColor();
        }
        if (!a.operate) {
            throw { type: "Operation",
                message: "Operation on an invalid type" };
        }

        return a.operate(context, this.op, b);
    } else {
        return new Operation(this.op, [a, b], this.isSpaced);
    }
};
Operation.prototype.genCSS = function (context, output) {
    this.operands[0].genCSS(context, output);
    if (this.isSpaced) {
        output.add(" ");
    }
    output.add(this.op);
    if (this.isSpaced) {
        output.add(" ");
    }
    this.operands[1].genCSS(context, output);
};

module.exports = Operation;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90cmVlL29wZXJhdGlvbi5qcyJdLCJuYW1lcyI6WyJOb2RlIiwicmVxdWlyZSIsIkNvbG9yIiwiRGltZW5zaW9uIiwiT3BlcmF0aW9uIiwib3AiLCJvcGVyYW5kcyIsImlzU3BhY2VkIiwidHJpbSIsInByb3RvdHlwZSIsInR5cGUiLCJhY2NlcHQiLCJ2aXNpdG9yIiwidmlzaXQiLCJldmFsIiwiY29udGV4dCIsImEiLCJiIiwiaXNNYXRoT24iLCJ0b0NvbG9yIiwib3BlcmF0ZSIsIm1lc3NhZ2UiLCJnZW5DU1MiLCJvdXRwdXQiLCJhZGQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLE9BQU9DLFFBQVEsUUFBUixDQUFYO0FBQUEsSUFDSUMsUUFBUUQsUUFBUSxTQUFSLENBRFo7QUFBQSxJQUVJRSxZQUFZRixRQUFRLGFBQVIsQ0FGaEI7O0FBSUEsSUFBSUcsWUFBWSxTQUFaQSxTQUFZLENBQVVDLEVBQVYsRUFBY0MsUUFBZCxFQUF3QkMsUUFBeEIsRUFBa0M7QUFDOUMsU0FBS0YsRUFBTCxHQUFVQSxHQUFHRyxJQUFILEVBQVY7QUFDQSxTQUFLRixRQUFMLEdBQWdCQSxRQUFoQjtBQUNBLFNBQUtDLFFBQUwsR0FBZ0JBLFFBQWhCO0FBQ0gsQ0FKRDtBQUtBSCxVQUFVSyxTQUFWLEdBQXNCLElBQUlULElBQUosRUFBdEI7QUFDQUksVUFBVUssU0FBVixDQUFvQkMsSUFBcEIsR0FBMkIsV0FBM0I7QUFDQU4sVUFBVUssU0FBVixDQUFvQkUsTUFBcEIsR0FBNkIsVUFBVUMsT0FBVixFQUFtQjtBQUM1QyxTQUFLTixRQUFMLEdBQWdCTSxRQUFRQyxLQUFSLENBQWMsS0FBS1AsUUFBbkIsQ0FBaEI7QUFDSCxDQUZEO0FBR0FGLFVBQVVLLFNBQVYsQ0FBb0JLLElBQXBCLEdBQTJCLFVBQVVDLE9BQVYsRUFBbUI7QUFDMUMsUUFBSUMsSUFBSSxLQUFLVixRQUFMLENBQWMsQ0FBZCxFQUFpQlEsSUFBakIsQ0FBc0JDLE9BQXRCLENBQVI7QUFBQSxRQUNJRSxJQUFJLEtBQUtYLFFBQUwsQ0FBYyxDQUFkLEVBQWlCUSxJQUFqQixDQUFzQkMsT0FBdEIsQ0FEUjs7QUFHQSxRQUFJQSxRQUFRRyxRQUFSLEVBQUosRUFBd0I7QUFDcEIsWUFBSUYsYUFBYWIsU0FBYixJQUEwQmMsYUFBYWYsS0FBM0MsRUFBa0Q7QUFDOUNjLGdCQUFJQSxFQUFFRyxPQUFGLEVBQUo7QUFDSDtBQUNELFlBQUlGLGFBQWFkLFNBQWIsSUFBMEJhLGFBQWFkLEtBQTNDLEVBQWtEO0FBQzlDZSxnQkFBSUEsRUFBRUUsT0FBRixFQUFKO0FBQ0g7QUFDRCxZQUFJLENBQUNILEVBQUVJLE9BQVAsRUFBZ0I7QUFDWixrQkFBTSxFQUFFVixNQUFNLFdBQVI7QUFDRVcseUJBQVMsOEJBRFgsRUFBTjtBQUVIOztBQUVELGVBQU9MLEVBQUVJLE9BQUYsQ0FBVUwsT0FBVixFQUFtQixLQUFLVixFQUF4QixFQUE0QlksQ0FBNUIsQ0FBUDtBQUNILEtBYkQsTUFhTztBQUNILGVBQU8sSUFBSWIsU0FBSixDQUFjLEtBQUtDLEVBQW5CLEVBQXVCLENBQUNXLENBQUQsRUFBSUMsQ0FBSixDQUF2QixFQUErQixLQUFLVixRQUFwQyxDQUFQO0FBQ0g7QUFDSixDQXBCRDtBQXFCQUgsVUFBVUssU0FBVixDQUFvQmEsTUFBcEIsR0FBNkIsVUFBVVAsT0FBVixFQUFtQlEsTUFBbkIsRUFBMkI7QUFDcEQsU0FBS2pCLFFBQUwsQ0FBYyxDQUFkLEVBQWlCZ0IsTUFBakIsQ0FBd0JQLE9BQXhCLEVBQWlDUSxNQUFqQztBQUNBLFFBQUksS0FBS2hCLFFBQVQsRUFBbUI7QUFDZmdCLGVBQU9DLEdBQVAsQ0FBVyxHQUFYO0FBQ0g7QUFDREQsV0FBT0MsR0FBUCxDQUFXLEtBQUtuQixFQUFoQjtBQUNBLFFBQUksS0FBS0UsUUFBVCxFQUFtQjtBQUNmZ0IsZUFBT0MsR0FBUCxDQUFXLEdBQVg7QUFDSDtBQUNELFNBQUtsQixRQUFMLENBQWMsQ0FBZCxFQUFpQmdCLE1BQWpCLENBQXdCUCxPQUF4QixFQUFpQ1EsTUFBakM7QUFDSCxDQVZEOztBQVlBRSxPQUFPQyxPQUFQLEdBQWlCdEIsU0FBakIiLCJmaWxlIjoib3BlcmF0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIE5vZGUgPSByZXF1aXJlKFwiLi9ub2RlXCIpLFxuICAgIENvbG9yID0gcmVxdWlyZShcIi4vY29sb3JcIiksXG4gICAgRGltZW5zaW9uID0gcmVxdWlyZShcIi4vZGltZW5zaW9uXCIpO1xuXG52YXIgT3BlcmF0aW9uID0gZnVuY3Rpb24gKG9wLCBvcGVyYW5kcywgaXNTcGFjZWQpIHtcbiAgICB0aGlzLm9wID0gb3AudHJpbSgpO1xuICAgIHRoaXMub3BlcmFuZHMgPSBvcGVyYW5kcztcbiAgICB0aGlzLmlzU3BhY2VkID0gaXNTcGFjZWQ7XG59O1xuT3BlcmF0aW9uLnByb3RvdHlwZSA9IG5ldyBOb2RlKCk7XG5PcGVyYXRpb24ucHJvdG90eXBlLnR5cGUgPSBcIk9wZXJhdGlvblwiO1xuT3BlcmF0aW9uLnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiAodmlzaXRvcikge1xuICAgIHRoaXMub3BlcmFuZHMgPSB2aXNpdG9yLnZpc2l0KHRoaXMub3BlcmFuZHMpO1xufTtcbk9wZXJhdGlvbi5wcm90b3R5cGUuZXZhbCA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgdmFyIGEgPSB0aGlzLm9wZXJhbmRzWzBdLmV2YWwoY29udGV4dCksXG4gICAgICAgIGIgPSB0aGlzLm9wZXJhbmRzWzFdLmV2YWwoY29udGV4dCk7XG5cbiAgICBpZiAoY29udGV4dC5pc01hdGhPbigpKSB7XG4gICAgICAgIGlmIChhIGluc3RhbmNlb2YgRGltZW5zaW9uICYmIGIgaW5zdGFuY2VvZiBDb2xvcikge1xuICAgICAgICAgICAgYSA9IGEudG9Db2xvcigpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChiIGluc3RhbmNlb2YgRGltZW5zaW9uICYmIGEgaW5zdGFuY2VvZiBDb2xvcikge1xuICAgICAgICAgICAgYiA9IGIudG9Db2xvcigpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghYS5vcGVyYXRlKSB7XG4gICAgICAgICAgICB0aHJvdyB7IHR5cGU6IFwiT3BlcmF0aW9uXCIsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwiT3BlcmF0aW9uIG9uIGFuIGludmFsaWQgdHlwZVwiIH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYS5vcGVyYXRlKGNvbnRleHQsIHRoaXMub3AsIGIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgT3BlcmF0aW9uKHRoaXMub3AsIFthLCBiXSwgdGhpcy5pc1NwYWNlZCk7XG4gICAgfVxufTtcbk9wZXJhdGlvbi5wcm90b3R5cGUuZ2VuQ1NTID0gZnVuY3Rpb24gKGNvbnRleHQsIG91dHB1dCkge1xuICAgIHRoaXMub3BlcmFuZHNbMF0uZ2VuQ1NTKGNvbnRleHQsIG91dHB1dCk7XG4gICAgaWYgKHRoaXMuaXNTcGFjZWQpIHtcbiAgICAgICAgb3V0cHV0LmFkZChcIiBcIik7XG4gICAgfVxuICAgIG91dHB1dC5hZGQodGhpcy5vcCk7XG4gICAgaWYgKHRoaXMuaXNTcGFjZWQpIHtcbiAgICAgICAgb3V0cHV0LmFkZChcIiBcIik7XG4gICAgfVxuICAgIHRoaXMub3BlcmFuZHNbMV0uZ2VuQ1NTKGNvbnRleHQsIG91dHB1dCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9wZXJhdGlvbjtcbiJdfQ==