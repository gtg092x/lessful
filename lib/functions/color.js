"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
var Dimension = require("../tree/dimension"),
    Color = require("../tree/color"),
    Anonymous = require("../tree/anonymous"),
    colorFunctions;

function clamp(val) {
    return Math.min(1, Math.max(0, val));
}
function hsla(color) {
    return colorFunctions.hsla(color.h, color.s, color.l, color.a);
}
function number(n) {
    if (n instanceof Dimension) {
        return parseFloat(n.unit.is('%') ? n.value / 100 : n.value);
    } else if (typeof n === 'number') {
        return n;
    } else {
        throw {
            type: "Argument",
            message: "color functions take numbers as parameters"
        };
    }
}
function scaled(n, size) {
    if (n instanceof Dimension && n.unit.is('%')) {
        return parseFloat(n.value * size / 100);
    } else {
        return number(n);
    }
}
exports.default = colorFunctions = {
    rgb: function rgb(r, g, b) {
        return colorFunctions.rgba(r, g, b, 1.0);
    },
    rgba: function rgba(r, g, b, a) {
        var rgb = [r, g, b].map(function (c) {
            return scaled(c, 255);
        });
        a = number(a);
        return new Color(rgb, a);
    },
    hsl: function hsl(h, s, l) {
        return colorFunctions.hsla(h, s, l, 1.0);
    },
    hsla: function hsla(h, s, l, a) {

        var m1, m2;

        function hue(h) {
            h = h < 0 ? h + 1 : h > 1 ? h - 1 : h;
            if (h * 6 < 1) {
                return m1 + (m2 - m1) * h * 6;
            } else if (h * 2 < 1) {
                return m2;
            } else if (h * 3 < 2) {
                return m1 + (m2 - m1) * (2 / 3 - h) * 6;
            } else {
                return m1;
            }
        }

        h = number(h) % 360 / 360;
        s = clamp(number(s));l = clamp(number(l));a = clamp(number(a));

        m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;
        m1 = l * 2 - m2;

        return colorFunctions.rgba(hue(h + 1 / 3) * 255, hue(h) * 255, hue(h - 1 / 3) * 255, a);
    },

    hsv: function hsv(h, s, v) {
        return colorFunctions.hsva(h, s, v, 1.0);
    },

    hsva: function hsva(h, s, v, a) {
        h = number(h) % 360 / 360 * 360;
        s = number(s);v = number(v);a = number(a);

        var i, f;
        i = Math.floor(h / 60 % 6);
        f = h / 60 - i;

        var vs = [v, v * (1 - s), v * (1 - f * s), v * (1 - (1 - f) * s)];
        var perm = [[0, 3, 1], [2, 0, 1], [1, 0, 3], [1, 2, 0], [3, 1, 0], [0, 1, 2]];

        return colorFunctions.rgba(vs[perm[i][0]] * 255, vs[perm[i][1]] * 255, vs[perm[i][2]] * 255, a);
    },

    hue: function hue(color) {
        return new Dimension(color.toHSL().h);
    },
    saturation: function saturation(color) {
        return new Dimension(color.toHSL().s * 100, '%');
    },
    lightness: function lightness(color) {
        return new Dimension(color.toHSL().l * 100, '%');
    },
    hsvhue: function hsvhue(color) {
        return new Dimension(color.toHSV().h);
    },
    hsvsaturation: function hsvsaturation(color) {
        return new Dimension(color.toHSV().s * 100, '%');
    },
    hsvvalue: function hsvvalue(color) {
        return new Dimension(color.toHSV().v * 100, '%');
    },
    red: function red(color) {
        return new Dimension(color.rgb[0]);
    },
    green: function green(color) {
        return new Dimension(color.rgb[1]);
    },
    blue: function blue(color) {
        return new Dimension(color.rgb[2]);
    },
    alpha: function alpha(color) {
        return new Dimension(color.toHSL().a);
    },
    luma: function luma(color) {
        return new Dimension(color.luma() * color.alpha * 100, '%');
    },
    luminance: function luminance(color) {
        var luminance = 0.2126 * color.rgb[0] / 255 + 0.7152 * color.rgb[1] / 255 + 0.0722 * color.rgb[2] / 255;

        return new Dimension(luminance * color.alpha * 100, '%');
    },
    saturate: function saturate(color, amount, method) {
        // filter: saturate(3.2);
        // should be kept as is, so check for color
        if (!color.rgb) {
            return null;
        }
        var hsl = color.toHSL();

        if (typeof method !== "undefined" && method.value === "relative") {
            hsl.s += hsl.s * amount.value / 100;
        } else {
            hsl.s += amount.value / 100;
        }
        hsl.s = clamp(hsl.s);
        return hsla(hsl);
    },
    desaturate: function desaturate(color, amount, method) {
        var hsl = color.toHSL();

        if (typeof method !== "undefined" && method.value === "relative") {
            hsl.s -= hsl.s * amount.value / 100;
        } else {
            hsl.s -= amount.value / 100;
        }
        hsl.s = clamp(hsl.s);
        return hsla(hsl);
    },
    lighten: function lighten(color, amount, method) {
        var hsl = color.toHSL();

        if (typeof method !== "undefined" && method.value === "relative") {
            hsl.l += hsl.l * amount.value / 100;
        } else {
            hsl.l += amount.value / 100;
        }
        hsl.l = clamp(hsl.l);
        return hsla(hsl);
    },
    darken: function darken(color, amount, method) {
        var hsl = color.toHSL();

        if (typeof method !== "undefined" && method.value === "relative") {
            hsl.l -= hsl.l * amount.value / 100;
        } else {
            hsl.l -= amount.value / 100;
        }
        hsl.l = clamp(hsl.l);
        return hsla(hsl);
    },
    fadein: function fadein(color, amount, method) {
        var hsl = color.toHSL();

        if (typeof method !== "undefined" && method.value === "relative") {
            hsl.a += hsl.a * amount.value / 100;
        } else {
            hsl.a += amount.value / 100;
        }
        hsl.a = clamp(hsl.a);
        return hsla(hsl);
    },
    fadeout: function fadeout(color, amount, method) {
        var hsl = color.toHSL();

        if (typeof method !== "undefined" && method.value === "relative") {
            hsl.a -= hsl.a * amount.value / 100;
        } else {
            hsl.a -= amount.value / 100;
        }
        hsl.a = clamp(hsl.a);
        return hsla(hsl);
    },
    fade: function fade(color, amount) {
        var hsl = color.toHSL();

        hsl.a = amount.value / 100;
        hsl.a = clamp(hsl.a);
        return hsla(hsl);
    },
    spin: function spin(color, amount) {
        var hsl = color.toHSL();
        var hue = (hsl.h + amount.value) % 360;

        hsl.h = hue < 0 ? 360 + hue : hue;

        return hsla(hsl);
    },
    //
    // Copyright (c) 2006-2009 Hampton Catlin, Natalie Weizenbaum, and Chris Eppstein
    // http://sass-lang.com
    //
    mix: function mix(color1, color2, weight) {
        if (!weight) {
            weight = new Dimension(50);
        }
        var p = weight.value / 100.0;
        var w = p * 2 - 1;
        var a = color1.toHSL().a - color2.toHSL().a;

        var w1 = ((w * a == -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
        var w2 = 1 - w1;

        var rgb = [color1.rgb[0] * w1 + color2.rgb[0] * w2, color1.rgb[1] * w1 + color2.rgb[1] * w2, color1.rgb[2] * w1 + color2.rgb[2] * w2];

        var alpha = color1.alpha * p + color2.alpha * (1 - p);

        return new Color(rgb, alpha);
    },
    greyscale: function greyscale(color) {
        return colorFunctions.desaturate(color, new Dimension(100));
    },
    contrast: function contrast(color, color1, color2, threshold) {
        // Return which of `color1` and `color2` has the greatest contrast with `color`
        // according to the standard WCAG contrast ratio calculation.
        // http://www.w3.org/TR/WCAG20/#contrast-ratiodef
        // The threshold param is no longer used, in line with SASS.
        // filter: contrast(3.2);
        // should be kept as is, so check for color
        if (!color.rgb) {
            return null;
        }
        if (typeof color1 === 'undefined') {
            color1 = colorFunctions.rgba(0, 0, 0, 1.0);
        }
        if (typeof color2 === 'undefined') {
            color2 = colorFunctions.rgba(255, 255, 255, 1.0);
        }
        var contrast1, contrast2;
        var luma = color.luma();
        var luma1 = color1.luma();
        var luma2 = color2.luma();
        // Calculate contrast ratios for each color
        if (luma > luma1) {
            contrast1 = (luma + 0.05) / (luma1 + 0.05);
        } else {
            contrast1 = (luma1 + 0.05) / (luma + 0.05);
        }
        if (luma > luma2) {
            contrast2 = (luma + 0.05) / (luma2 + 0.05);
        } else {
            contrast2 = (luma2 + 0.05) / (luma + 0.05);
        }
        if (contrast1 > contrast2) {
            return color1;
        } else {
            return color2;
        }
    },
    argb: function argb(color) {
        return new Anonymous(color.toARGB());
    },
    color: function color(c) {
        if (c instanceof Color || (c = Color.fromKeyword(c.value))) {
            c.value = undefined;
            return c;
        }
        throw {
            type: "Argument",
            message: "argument must be a color keyword or 3/6 digit hex e.g. #FFF"
        };
    },
    tint: function tint(color, amount) {
        return colorFunctions.mix(colorFunctions.rgb(255, 255, 255), color, amount);
    },
    shade: function shade(color, amount) {
        return colorFunctions.mix(colorFunctions.rgb(0, 0, 0), color, amount);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mdW5jdGlvbnMvY29sb3IuanMiXSwibmFtZXMiOlsiRGltZW5zaW9uIiwicmVxdWlyZSIsIkNvbG9yIiwiQW5vbnltb3VzIiwiY29sb3JGdW5jdGlvbnMiLCJjbGFtcCIsInZhbCIsIk1hdGgiLCJtaW4iLCJtYXgiLCJoc2xhIiwiY29sb3IiLCJoIiwicyIsImwiLCJhIiwibnVtYmVyIiwibiIsInBhcnNlRmxvYXQiLCJ1bml0IiwiaXMiLCJ2YWx1ZSIsInR5cGUiLCJtZXNzYWdlIiwic2NhbGVkIiwic2l6ZSIsInJnYiIsInIiLCJnIiwiYiIsInJnYmEiLCJtYXAiLCJjIiwiaHNsIiwibTEiLCJtMiIsImh1ZSIsImhzdiIsInYiLCJoc3ZhIiwiaSIsImYiLCJmbG9vciIsInZzIiwicGVybSIsInRvSFNMIiwic2F0dXJhdGlvbiIsImxpZ2h0bmVzcyIsImhzdmh1ZSIsInRvSFNWIiwiaHN2c2F0dXJhdGlvbiIsImhzdnZhbHVlIiwicmVkIiwiZ3JlZW4iLCJibHVlIiwiYWxwaGEiLCJsdW1hIiwibHVtaW5hbmNlIiwic2F0dXJhdGUiLCJhbW91bnQiLCJtZXRob2QiLCJkZXNhdHVyYXRlIiwibGlnaHRlbiIsImRhcmtlbiIsImZhZGVpbiIsImZhZGVvdXQiLCJmYWRlIiwic3BpbiIsIm1peCIsImNvbG9yMSIsImNvbG9yMiIsIndlaWdodCIsInAiLCJ3IiwidzEiLCJ3MiIsImdyZXlzY2FsZSIsImNvbnRyYXN0IiwidGhyZXNob2xkIiwiY29udHJhc3QxIiwiY29udHJhc3QyIiwibHVtYTEiLCJsdW1hMiIsImFyZ2IiLCJ0b0FSR0IiLCJmcm9tS2V5d29yZCIsInVuZGVmaW5lZCIsInRpbnQiLCJzaGFkZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFJQSxZQUFZQyxRQUFRLG1CQUFSLENBQWhCO0FBQUEsSUFDSUMsUUFBUUQsUUFBUSxlQUFSLENBRFo7QUFBQSxJQUVJRSxZQUFZRixRQUFRLG1CQUFSLENBRmhCO0FBQUEsSUFHSUcs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O0FBQ0gsbUJBQU9DLE1BQVA7QUFDSDtBQUNKLEtBNVEyQjtBQTZRNUJhLFVBQU0sY0FBVXhFLEtBQVYsRUFBaUI7QUFDbkIsZUFBTyxJQUFJUixTQUFKLENBQWNRLE1BQU15RSxNQUFOLEVBQWQsQ0FBUDtBQUNILEtBL1EyQjtBQWdSNUJ6RSxXQUFPLGVBQVNxQixDQUFULEVBQVk7QUFDZixZQUFLQSxhQUFhOUIsS0FBZCxLQUF5QjhCLElBQUk5QixNQUFNbUYsV0FBTixDQUFrQnJELEVBQUVYLEtBQXBCLENBQTdCLENBQUosRUFBOEQ7QUFDMURXLGNBQUVYLEtBQUYsR0FBVWlFLFNBQVY7QUFDQSxtQkFBT3RELENBQVA7QUFDSDtBQUNELGNBQU07QUFDRlYsa0JBQVMsVUFEUDtBQUVGQyxxQkFBUztBQUZQLFNBQU47QUFJSCxLQXpSMkI7QUEwUjVCZ0UsVUFBTSxjQUFTNUUsS0FBVCxFQUFnQmdELE1BQWhCLEVBQXdCO0FBQzFCLGVBQU92RCxlQUFlZ0UsR0FBZixDQUFtQmhFLGVBQWVzQixHQUFmLENBQW1CLEdBQW5CLEVBQXdCLEdBQXhCLEVBQTZCLEdBQTdCLENBQW5CLEVBQXNEZixLQUF0RCxFQUE2RGdELE1BQTdELENBQVA7QUFDSCxLQTVSMkI7QUE2UjVCNkIsV0FBTyxlQUFTN0UsS0FBVCxFQUFnQmdELE1BQWhCLEVBQXdCO0FBQzNCLGVBQU92RCxlQUFlZ0UsR0FBZixDQUFtQmhFLGVBQWVzQixHQUFmLENBQW1CLENBQW5CLEVBQXNCLENBQXRCLEVBQXlCLENBQXpCLENBQW5CLEVBQWdEZixLQUFoRCxFQUF1RGdELE1BQXZELENBQVA7QUFDSDtBQS9SMkIsQyIsImZpbGUiOiJjb2xvci5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBEaW1lbnNpb24gPSByZXF1aXJlKFwiLi4vdHJlZS9kaW1lbnNpb25cIiksXG4gICAgQ29sb3IgPSByZXF1aXJlKFwiLi4vdHJlZS9jb2xvclwiKSxcbiAgICBBbm9ueW1vdXMgPSByZXF1aXJlKFwiLi4vdHJlZS9hbm9ueW1vdXNcIiksXG4gICAgY29sb3JGdW5jdGlvbnM7XG5cbmZ1bmN0aW9uIGNsYW1wKHZhbCkge1xuICAgIHJldHVybiBNYXRoLm1pbigxLCBNYXRoLm1heCgwLCB2YWwpKTtcbn1cbmZ1bmN0aW9uIGhzbGEoY29sb3IpIHtcbiAgICByZXR1cm4gY29sb3JGdW5jdGlvbnMuaHNsYShjb2xvci5oLCBjb2xvci5zLCBjb2xvci5sLCBjb2xvci5hKTtcbn1cbmZ1bmN0aW9uIG51bWJlcihuKSB7XG4gICAgaWYgKG4gaW5zdGFuY2VvZiBEaW1lbnNpb24pIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQobi51bml0LmlzKCclJykgPyBuLnZhbHVlIC8gMTAwIDogbi52YWx1ZSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbiA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIG47XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cge1xuICAgICAgICAgICAgdHlwZTogXCJBcmd1bWVudFwiLFxuICAgICAgICAgICAgbWVzc2FnZTogXCJjb2xvciBmdW5jdGlvbnMgdGFrZSBudW1iZXJzIGFzIHBhcmFtZXRlcnNcIlxuICAgICAgICB9O1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNjYWxlZChuLCBzaXplKSB7XG4gICAgaWYgKG4gaW5zdGFuY2VvZiBEaW1lbnNpb24gJiYgbi51bml0LmlzKCclJykpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQobi52YWx1ZSAqIHNpemUgLyAxMDApO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudW1iZXIobik7XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgY29sb3JGdW5jdGlvbnMgPSB7XG4gICAgcmdiOiBmdW5jdGlvbiAociwgZywgYikge1xuICAgICAgICByZXR1cm4gY29sb3JGdW5jdGlvbnMucmdiYShyLCBnLCBiLCAxLjApO1xuICAgIH0sXG4gICAgcmdiYTogZnVuY3Rpb24gKHIsIGcsIGIsIGEpIHtcbiAgICAgICAgdmFyIHJnYiA9IFtyLCBnLCBiXS5tYXAoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIHNjYWxlZChjLCAyNTUpOyB9KTtcbiAgICAgICAgYSA9IG51bWJlcihhKTtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihyZ2IsIGEpO1xuICAgIH0sXG4gICAgaHNsOiBmdW5jdGlvbiAoaCwgcywgbCkge1xuICAgICAgICByZXR1cm4gY29sb3JGdW5jdGlvbnMuaHNsYShoLCBzLCBsLCAxLjApO1xuICAgIH0sXG4gICAgaHNsYTogZnVuY3Rpb24gKGgsIHMsIGwsIGEpIHtcblxuICAgICAgICB2YXIgbTEsIG0yO1xuXG4gICAgICAgIGZ1bmN0aW9uIGh1ZShoKSB7XG4gICAgICAgICAgICBoID0gaCA8IDAgPyBoICsgMSA6IChoID4gMSA/IGggLSAxIDogaCk7XG4gICAgICAgICAgICBpZiAoaCAqIDYgPCAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG0xICsgKG0yIC0gbTEpICogaCAqIDY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChoICogMiA8IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbTI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChoICogMyA8IDIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbTEgKyAobTIgLSBtMSkgKiAoMiAvIDMgLSBoKSAqIDY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbTE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBoID0gKG51bWJlcihoKSAlIDM2MCkgLyAzNjA7XG4gICAgICAgIHMgPSBjbGFtcChudW1iZXIocykpOyBsID0gY2xhbXAobnVtYmVyKGwpKTsgYSA9IGNsYW1wKG51bWJlcihhKSk7XG5cbiAgICAgICAgbTIgPSBsIDw9IDAuNSA/IGwgKiAocyArIDEpIDogbCArIHMgLSBsICogcztcbiAgICAgICAgbTEgPSBsICogMiAtIG0yO1xuXG4gICAgICAgIHJldHVybiBjb2xvckZ1bmN0aW9ucy5yZ2JhKGh1ZShoICsgMSAvIDMpICogMjU1LFxuICAgICAgICAgICAgaHVlKGgpICAgICAgICogMjU1LFxuICAgICAgICAgICAgaHVlKGggLSAxIC8gMykgKiAyNTUsXG4gICAgICAgICAgICBhKTtcbiAgICB9LFxuXG4gICAgaHN2OiBmdW5jdGlvbihoLCBzLCB2KSB7XG4gICAgICAgIHJldHVybiBjb2xvckZ1bmN0aW9ucy5oc3ZhKGgsIHMsIHYsIDEuMCk7XG4gICAgfSxcblxuICAgIGhzdmE6IGZ1bmN0aW9uKGgsIHMsIHYsIGEpIHtcbiAgICAgICAgaCA9ICgobnVtYmVyKGgpICUgMzYwKSAvIDM2MCkgKiAzNjA7XG4gICAgICAgIHMgPSBudW1iZXIocyk7IHYgPSBudW1iZXIodik7IGEgPSBudW1iZXIoYSk7XG5cbiAgICAgICAgdmFyIGksIGY7XG4gICAgICAgIGkgPSBNYXRoLmZsb29yKChoIC8gNjApICUgNik7XG4gICAgICAgIGYgPSAoaCAvIDYwKSAtIGk7XG5cbiAgICAgICAgdmFyIHZzID0gW3YsXG4gICAgICAgICAgICB2ICogKDEgLSBzKSxcbiAgICAgICAgICAgIHYgKiAoMSAtIGYgKiBzKSxcbiAgICAgICAgICAgIHYgKiAoMSAtICgxIC0gZikgKiBzKV07XG4gICAgICAgIHZhciBwZXJtID0gW1swLCAzLCAxXSxcbiAgICAgICAgICAgIFsyLCAwLCAxXSxcbiAgICAgICAgICAgIFsxLCAwLCAzXSxcbiAgICAgICAgICAgIFsxLCAyLCAwXSxcbiAgICAgICAgICAgIFszLCAxLCAwXSxcbiAgICAgICAgICAgIFswLCAxLCAyXV07XG5cbiAgICAgICAgcmV0dXJuIGNvbG9yRnVuY3Rpb25zLnJnYmEodnNbcGVybVtpXVswXV0gKiAyNTUsXG4gICAgICAgICAgICB2c1twZXJtW2ldWzFdXSAqIDI1NSxcbiAgICAgICAgICAgIHZzW3Blcm1baV1bMl1dICogMjU1LFxuICAgICAgICAgICAgYSk7XG4gICAgfSxcblxuICAgIGh1ZTogZnVuY3Rpb24gKGNvbG9yKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGltZW5zaW9uKGNvbG9yLnRvSFNMKCkuaCk7XG4gICAgfSxcbiAgICBzYXR1cmF0aW9uOiBmdW5jdGlvbiAoY29sb3IpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEaW1lbnNpb24oY29sb3IudG9IU0woKS5zICogMTAwLCAnJScpO1xuICAgIH0sXG4gICAgbGlnaHRuZXNzOiBmdW5jdGlvbiAoY29sb3IpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEaW1lbnNpb24oY29sb3IudG9IU0woKS5sICogMTAwLCAnJScpO1xuICAgIH0sXG4gICAgaHN2aHVlOiBmdW5jdGlvbihjb2xvcikge1xuICAgICAgICByZXR1cm4gbmV3IERpbWVuc2lvbihjb2xvci50b0hTVigpLmgpO1xuICAgIH0sXG4gICAgaHN2c2F0dXJhdGlvbjogZnVuY3Rpb24gKGNvbG9yKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGltZW5zaW9uKGNvbG9yLnRvSFNWKCkucyAqIDEwMCwgJyUnKTtcbiAgICB9LFxuICAgIGhzdnZhbHVlOiBmdW5jdGlvbiAoY29sb3IpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEaW1lbnNpb24oY29sb3IudG9IU1YoKS52ICogMTAwLCAnJScpO1xuICAgIH0sXG4gICAgcmVkOiBmdW5jdGlvbiAoY29sb3IpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEaW1lbnNpb24oY29sb3IucmdiWzBdKTtcbiAgICB9LFxuICAgIGdyZWVuOiBmdW5jdGlvbiAoY29sb3IpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEaW1lbnNpb24oY29sb3IucmdiWzFdKTtcbiAgICB9LFxuICAgIGJsdWU6IGZ1bmN0aW9uIChjb2xvcikge1xuICAgICAgICByZXR1cm4gbmV3IERpbWVuc2lvbihjb2xvci5yZ2JbMl0pO1xuICAgIH0sXG4gICAgYWxwaGE6IGZ1bmN0aW9uIChjb2xvcikge1xuICAgICAgICByZXR1cm4gbmV3IERpbWVuc2lvbihjb2xvci50b0hTTCgpLmEpO1xuICAgIH0sXG4gICAgbHVtYTogZnVuY3Rpb24gKGNvbG9yKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGltZW5zaW9uKGNvbG9yLmx1bWEoKSAqIGNvbG9yLmFscGhhICogMTAwLCAnJScpO1xuICAgIH0sXG4gICAgbHVtaW5hbmNlOiBmdW5jdGlvbiAoY29sb3IpIHtcbiAgICAgICAgdmFyIGx1bWluYW5jZSA9XG4gICAgICAgICAgICAoMC4yMTI2ICogY29sb3IucmdiWzBdIC8gMjU1KSArXG4gICAgICAgICAgICAgICAgKDAuNzE1MiAqIGNvbG9yLnJnYlsxXSAvIDI1NSkgK1xuICAgICAgICAgICAgICAgICgwLjA3MjIgKiBjb2xvci5yZ2JbMl0gLyAyNTUpO1xuXG4gICAgICAgIHJldHVybiBuZXcgRGltZW5zaW9uKGx1bWluYW5jZSAqIGNvbG9yLmFscGhhICogMTAwLCAnJScpO1xuICAgIH0sXG4gICAgc2F0dXJhdGU6IGZ1bmN0aW9uIChjb2xvciwgYW1vdW50LCBtZXRob2QpIHtcbiAgICAgICAgLy8gZmlsdGVyOiBzYXR1cmF0ZSgzLjIpO1xuICAgICAgICAvLyBzaG91bGQgYmUga2VwdCBhcyBpcywgc28gY2hlY2sgZm9yIGNvbG9yXG4gICAgICAgIGlmICghY29sb3IucmdiKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaHNsID0gY29sb3IudG9IU0woKTtcblxuICAgICAgICBpZiAodHlwZW9mIG1ldGhvZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBtZXRob2QudmFsdWUgPT09IFwicmVsYXRpdmVcIikge1xuICAgICAgICAgICAgaHNsLnMgKz0gIGhzbC5zICogYW1vdW50LnZhbHVlIC8gMTAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaHNsLnMgKz0gYW1vdW50LnZhbHVlIC8gMTAwO1xuICAgICAgICB9XG4gICAgICAgIGhzbC5zID0gY2xhbXAoaHNsLnMpO1xuICAgICAgICByZXR1cm4gaHNsYShoc2wpO1xuICAgIH0sXG4gICAgZGVzYXR1cmF0ZTogZnVuY3Rpb24gKGNvbG9yLCBhbW91bnQsIG1ldGhvZCkge1xuICAgICAgICB2YXIgaHNsID0gY29sb3IudG9IU0woKTtcblxuICAgICAgICBpZiAodHlwZW9mIG1ldGhvZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBtZXRob2QudmFsdWUgPT09IFwicmVsYXRpdmVcIikge1xuICAgICAgICAgICAgaHNsLnMgLT0gIGhzbC5zICogYW1vdW50LnZhbHVlIC8gMTAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaHNsLnMgLT0gYW1vdW50LnZhbHVlIC8gMTAwO1xuICAgICAgICB9XG4gICAgICAgIGhzbC5zID0gY2xhbXAoaHNsLnMpO1xuICAgICAgICByZXR1cm4gaHNsYShoc2wpO1xuICAgIH0sXG4gICAgbGlnaHRlbjogZnVuY3Rpb24gKGNvbG9yLCBhbW91bnQsIG1ldGhvZCkge1xuICAgICAgICB2YXIgaHNsID0gY29sb3IudG9IU0woKTtcblxuICAgICAgICBpZiAodHlwZW9mIG1ldGhvZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBtZXRob2QudmFsdWUgPT09IFwicmVsYXRpdmVcIikge1xuICAgICAgICAgICAgaHNsLmwgKz0gIGhzbC5sICogYW1vdW50LnZhbHVlIC8gMTAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaHNsLmwgKz0gYW1vdW50LnZhbHVlIC8gMTAwO1xuICAgICAgICB9XG4gICAgICAgIGhzbC5sID0gY2xhbXAoaHNsLmwpO1xuICAgICAgICByZXR1cm4gaHNsYShoc2wpO1xuICAgIH0sXG4gICAgZGFya2VuOiBmdW5jdGlvbiAoY29sb3IsIGFtb3VudCwgbWV0aG9kKSB7XG4gICAgICAgIHZhciBoc2wgPSBjb2xvci50b0hTTCgpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgbWV0aG9kICE9PSBcInVuZGVmaW5lZFwiICYmIG1ldGhvZC52YWx1ZSA9PT0gXCJyZWxhdGl2ZVwiKSB7XG4gICAgICAgICAgICBoc2wubCAtPSAgaHNsLmwgKiBhbW91bnQudmFsdWUgLyAxMDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBoc2wubCAtPSBhbW91bnQudmFsdWUgLyAxMDA7XG4gICAgICAgIH1cbiAgICAgICAgaHNsLmwgPSBjbGFtcChoc2wubCk7XG4gICAgICAgIHJldHVybiBoc2xhKGhzbCk7XG4gICAgfSxcbiAgICBmYWRlaW46IGZ1bmN0aW9uIChjb2xvciwgYW1vdW50LCBtZXRob2QpIHtcbiAgICAgICAgdmFyIGhzbCA9IGNvbG9yLnRvSFNMKCk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBtZXRob2QgIT09IFwidW5kZWZpbmVkXCIgJiYgbWV0aG9kLnZhbHVlID09PSBcInJlbGF0aXZlXCIpIHtcbiAgICAgICAgICAgIGhzbC5hICs9ICBoc2wuYSAqIGFtb3VudC52YWx1ZSAvIDEwMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGhzbC5hICs9IGFtb3VudC52YWx1ZSAvIDEwMDtcbiAgICAgICAgfVxuICAgICAgICBoc2wuYSA9IGNsYW1wKGhzbC5hKTtcbiAgICAgICAgcmV0dXJuIGhzbGEoaHNsKTtcbiAgICB9LFxuICAgIGZhZGVvdXQ6IGZ1bmN0aW9uIChjb2xvciwgYW1vdW50LCBtZXRob2QpIHtcbiAgICAgICAgdmFyIGhzbCA9IGNvbG9yLnRvSFNMKCk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBtZXRob2QgIT09IFwidW5kZWZpbmVkXCIgJiYgbWV0aG9kLnZhbHVlID09PSBcInJlbGF0aXZlXCIpIHtcbiAgICAgICAgICAgIGhzbC5hIC09ICBoc2wuYSAqIGFtb3VudC52YWx1ZSAvIDEwMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGhzbC5hIC09IGFtb3VudC52YWx1ZSAvIDEwMDtcbiAgICAgICAgfVxuICAgICAgICBoc2wuYSA9IGNsYW1wKGhzbC5hKTtcbiAgICAgICAgcmV0dXJuIGhzbGEoaHNsKTtcbiAgICB9LFxuICAgIGZhZGU6IGZ1bmN0aW9uIChjb2xvciwgYW1vdW50KSB7XG4gICAgICAgIHZhciBoc2wgPSBjb2xvci50b0hTTCgpO1xuXG4gICAgICAgIGhzbC5hID0gYW1vdW50LnZhbHVlIC8gMTAwO1xuICAgICAgICBoc2wuYSA9IGNsYW1wKGhzbC5hKTtcbiAgICAgICAgcmV0dXJuIGhzbGEoaHNsKTtcbiAgICB9LFxuICAgIHNwaW46IGZ1bmN0aW9uIChjb2xvciwgYW1vdW50KSB7XG4gICAgICAgIHZhciBoc2wgPSBjb2xvci50b0hTTCgpO1xuICAgICAgICB2YXIgaHVlID0gKGhzbC5oICsgYW1vdW50LnZhbHVlKSAlIDM2MDtcblxuICAgICAgICBoc2wuaCA9IGh1ZSA8IDAgPyAzNjAgKyBodWUgOiBodWU7XG5cbiAgICAgICAgcmV0dXJuIGhzbGEoaHNsKTtcbiAgICB9LFxuICAgIC8vXG4gICAgLy8gQ29weXJpZ2h0IChjKSAyMDA2LTIwMDkgSGFtcHRvbiBDYXRsaW4sIE5hdGFsaWUgV2VpemVuYmF1bSwgYW5kIENocmlzIEVwcHN0ZWluXG4gICAgLy8gaHR0cDovL3Nhc3MtbGFuZy5jb21cbiAgICAvL1xuICAgIG1peDogZnVuY3Rpb24gKGNvbG9yMSwgY29sb3IyLCB3ZWlnaHQpIHtcbiAgICAgICAgaWYgKCF3ZWlnaHQpIHtcbiAgICAgICAgICAgIHdlaWdodCA9IG5ldyBEaW1lbnNpb24oNTApO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwID0gd2VpZ2h0LnZhbHVlIC8gMTAwLjA7XG4gICAgICAgIHZhciB3ID0gcCAqIDIgLSAxO1xuICAgICAgICB2YXIgYSA9IGNvbG9yMS50b0hTTCgpLmEgLSBjb2xvcjIudG9IU0woKS5hO1xuXG4gICAgICAgIHZhciB3MSA9ICgoKHcgKiBhID09IC0xKSA/IHcgOiAodyArIGEpIC8gKDEgKyB3ICogYSkpICsgMSkgLyAyLjA7XG4gICAgICAgIHZhciB3MiA9IDEgLSB3MTtcblxuICAgICAgICB2YXIgcmdiID0gW2NvbG9yMS5yZ2JbMF0gKiB3MSArIGNvbG9yMi5yZ2JbMF0gKiB3MixcbiAgICAgICAgICAgIGNvbG9yMS5yZ2JbMV0gKiB3MSArIGNvbG9yMi5yZ2JbMV0gKiB3MixcbiAgICAgICAgICAgIGNvbG9yMS5yZ2JbMl0gKiB3MSArIGNvbG9yMi5yZ2JbMl0gKiB3Ml07XG5cbiAgICAgICAgdmFyIGFscGhhID0gY29sb3IxLmFscGhhICogcCArIGNvbG9yMi5hbHBoYSAqICgxIC0gcCk7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihyZ2IsIGFscGhhKTtcbiAgICB9LFxuICAgIGdyZXlzY2FsZTogZnVuY3Rpb24gKGNvbG9yKSB7XG4gICAgICAgIHJldHVybiBjb2xvckZ1bmN0aW9ucy5kZXNhdHVyYXRlKGNvbG9yLCBuZXcgRGltZW5zaW9uKDEwMCkpO1xuICAgIH0sXG4gICAgY29udHJhc3Q6IGZ1bmN0aW9uIChjb2xvciwgY29sb3IxLCBjb2xvcjIsIHRocmVzaG9sZCkge1xuICAgICAgICAvLyBSZXR1cm4gd2hpY2ggb2YgYGNvbG9yMWAgYW5kIGBjb2xvcjJgIGhhcyB0aGUgZ3JlYXRlc3QgY29udHJhc3Qgd2l0aCBgY29sb3JgXG4gICAgICAgIC8vIGFjY29yZGluZyB0byB0aGUgc3RhbmRhcmQgV0NBRyBjb250cmFzdCByYXRpbyBjYWxjdWxhdGlvbi5cbiAgICAgICAgLy8gaHR0cDovL3d3dy53My5vcmcvVFIvV0NBRzIwLyNjb250cmFzdC1yYXRpb2RlZlxuICAgICAgICAvLyBUaGUgdGhyZXNob2xkIHBhcmFtIGlzIG5vIGxvbmdlciB1c2VkLCBpbiBsaW5lIHdpdGggU0FTUy5cbiAgICAgICAgLy8gZmlsdGVyOiBjb250cmFzdCgzLjIpO1xuICAgICAgICAvLyBzaG91bGQgYmUga2VwdCBhcyBpcywgc28gY2hlY2sgZm9yIGNvbG9yXG4gICAgICAgIGlmICghY29sb3IucmdiKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGNvbG9yMSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGNvbG9yMSA9IGNvbG9yRnVuY3Rpb25zLnJnYmEoMCwgMCwgMCwgMS4wKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGNvbG9yMiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGNvbG9yMiA9IGNvbG9yRnVuY3Rpb25zLnJnYmEoMjU1LCAyNTUsIDI1NSwgMS4wKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY29udHJhc3QxLCBjb250cmFzdDI7XG4gICAgICAgIHZhciBsdW1hID0gY29sb3IubHVtYSgpO1xuICAgICAgICB2YXIgbHVtYTEgPSBjb2xvcjEubHVtYSgpO1xuICAgICAgICB2YXIgbHVtYTIgPSBjb2xvcjIubHVtYSgpO1xuICAgICAgICAvLyBDYWxjdWxhdGUgY29udHJhc3QgcmF0aW9zIGZvciBlYWNoIGNvbG9yXG4gICAgICAgIGlmIChsdW1hID4gbHVtYTEpIHtcbiAgICAgICAgICAgIGNvbnRyYXN0MSA9IChsdW1hICsgMC4wNSkgLyAobHVtYTEgKyAwLjA1KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnRyYXN0MSA9IChsdW1hMSArIDAuMDUpIC8gKGx1bWEgKyAwLjA1KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobHVtYSA+IGx1bWEyKSB7XG4gICAgICAgICAgICBjb250cmFzdDIgPSAobHVtYSArIDAuMDUpIC8gKGx1bWEyICsgMC4wNSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb250cmFzdDIgPSAobHVtYTIgKyAwLjA1KSAvIChsdW1hICsgMC4wNSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbnRyYXN0MSA+IGNvbnRyYXN0Mikge1xuICAgICAgICAgICAgcmV0dXJuIGNvbG9yMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBjb2xvcjI7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGFyZ2I6IGZ1bmN0aW9uIChjb2xvcikge1xuICAgICAgICByZXR1cm4gbmV3IEFub255bW91cyhjb2xvci50b0FSR0IoKSk7XG4gICAgfSxcbiAgICBjb2xvcjogZnVuY3Rpb24oYykge1xuICAgICAgICBpZiAoKGMgaW5zdGFuY2VvZiBDb2xvcikgfHwgKGMgPSBDb2xvci5mcm9tS2V5d29yZChjLnZhbHVlKSkpIHtcbiAgICAgICAgICAgIGMudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICByZXR1cm4gYztcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyB7XG4gICAgICAgICAgICB0eXBlOiAgICBcIkFyZ3VtZW50XCIsXG4gICAgICAgICAgICBtZXNzYWdlOiBcImFyZ3VtZW50IG11c3QgYmUgYSBjb2xvciBrZXl3b3JkIG9yIDMvNiBkaWdpdCBoZXggZS5nLiAjRkZGXCJcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRpbnQ6IGZ1bmN0aW9uKGNvbG9yLCBhbW91bnQpIHtcbiAgICAgICAgcmV0dXJuIGNvbG9yRnVuY3Rpb25zLm1peChjb2xvckZ1bmN0aW9ucy5yZ2IoMjU1LCAyNTUsIDI1NSksIGNvbG9yLCBhbW91bnQpO1xuICAgIH0sXG4gICAgc2hhZGU6IGZ1bmN0aW9uKGNvbG9yLCBhbW91bnQpIHtcbiAgICAgICAgcmV0dXJuIGNvbG9yRnVuY3Rpb25zLm1peChjb2xvckZ1bmN0aW9ucy5yZ2IoMCwgMCwgMCksIGNvbG9yLCBhbW91bnQpO1xuICAgIH1cbn07XG4iXX0=