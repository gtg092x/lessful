"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
var Color = require("../tree/color");
// Color Blending
// ref: http://www.w3.org/TR/compositing-1

function colorBlend(mode, color1, color2) {
    var ab = color1.alpha,
        cb,
        // backdrop
    as = color2.alpha,
        cs,
        // source
    ar,
        cr,
        r = []; // result

    ar = as + ab * (1 - as);
    for (var i = 0; i < 3; i++) {
        cb = color1.rgb[i] / 255;
        cs = color2.rgb[i] / 255;
        cr = mode(cb, cs);
        if (ar) {
            cr = (as * cs + ab * (cb - as * (cb + cs - cr))) / ar;
        }
        r[i] = cr * 255;
    }

    return new Color(r, ar);
}

var colorBlendModeFunctions = {
    multiply: function multiply(cb, cs) {
        return cb * cs;
    },
    screen: function screen(cb, cs) {
        return cb + cs - cb * cs;
    },
    overlay: function overlay(cb, cs) {
        cb *= 2;
        return cb <= 1 ? colorBlendModeFunctions.multiply(cb, cs) : colorBlendModeFunctions.screen(cb - 1, cs);
    },
    softlight: function softlight(cb, cs) {
        var d = 1,
            e = cb;
        if (cs > 0.5) {
            e = 1;
            d = cb > 0.25 ? Math.sqrt(cb) : ((16 * cb - 12) * cb + 4) * cb;
        }
        return cb - (1 - 2 * cs) * e * (d - cb);
    },
    hardlight: function hardlight(cb, cs) {
        return colorBlendModeFunctions.overlay(cs, cb);
    },
    difference: function difference(cb, cs) {
        return Math.abs(cb - cs);
    },
    exclusion: function exclusion(cb, cs) {
        return cb + cs - 2 * cb * cs;
    },

    // non-w3c functions:
    average: function average(cb, cs) {
        return (cb + cs) / 2;
    },
    negation: function negation(cb, cs) {
        return 1 - Math.abs(cb + cs - 1);
    }
};

for (var f in colorBlendModeFunctions) {
    if (colorBlendModeFunctions.hasOwnProperty(f)) {
        colorBlend[f] = colorBlend.bind(null, colorBlendModeFunctions[f]);
    }
}

exports.default = colorBlend;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mdW5jdGlvbnMvY29sb3ItYmxlbmRpbmcuanMiXSwibmFtZXMiOlsiQ29sb3IiLCJyZXF1aXJlIiwiY29sb3JCbGVuZCIsIm1vZGUiLCJjb2xvcjEiLCJjb2xvcjIiLCJhYiIsImFscGhhIiwiY2IiLCJhcyIsImNzIiwiYXIiLCJjciIsInIiLCJpIiwicmdiIiwiY29sb3JCbGVuZE1vZGVGdW5jdGlvbnMiLCJtdWx0aXBseSIsInNjcmVlbiIsIm92ZXJsYXkiLCJzb2Z0bGlnaHQiLCJkIiwiZSIsIk1hdGgiLCJzcXJ0IiwiaGFyZGxpZ2h0IiwiZGlmZmVyZW5jZSIsImFicyIsImV4Y2x1c2lvbiIsImF2ZXJhZ2UiLCJuZWdhdGlvbiIsImYiLCJoYXNPd25Qcm9wZXJ0eSIsImJpbmQiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsSUFBSUEsUUFBUUMsUUFBUSxlQUFSLENBQVo7QUFDQTtBQUNBOztBQUVBLFNBQVNDLFVBQVQsQ0FBb0JDLElBQXBCLEVBQTBCQyxNQUExQixFQUFrQ0MsTUFBbEMsRUFBMEM7QUFDdEMsUUFBSUMsS0FBS0YsT0FBT0csS0FBaEI7QUFBQSxRQUF1QkMsRUFBdkI7QUFBQSxRQUEyQjtBQUN2QkMsU0FBS0osT0FBT0UsS0FEaEI7QUFBQSxRQUN1QkcsRUFEdkI7QUFBQSxRQUMyQjtBQUN2QkMsTUFGSjtBQUFBLFFBRVFDLEVBRlI7QUFBQSxRQUVZQyxJQUFJLEVBRmhCLENBRHNDLENBR1g7O0FBRTNCRixTQUFLRixLQUFLSCxNQUFNLElBQUlHLEVBQVYsQ0FBVjtBQUNBLFNBQUssSUFBSUssSUFBSSxDQUFiLEVBQWdCQSxJQUFJLENBQXBCLEVBQXVCQSxHQUF2QixFQUE0QjtBQUN4Qk4sYUFBS0osT0FBT1csR0FBUCxDQUFXRCxDQUFYLElBQWdCLEdBQXJCO0FBQ0FKLGFBQUtMLE9BQU9VLEdBQVAsQ0FBV0QsQ0FBWCxJQUFnQixHQUFyQjtBQUNBRixhQUFLVCxLQUFLSyxFQUFMLEVBQVNFLEVBQVQsQ0FBTDtBQUNBLFlBQUlDLEVBQUosRUFBUTtBQUNKQyxpQkFBSyxDQUFDSCxLQUFLQyxFQUFMLEdBQVVKLE1BQU1FLEtBQ2hCQyxNQUFNRCxLQUFLRSxFQUFMLEdBQVVFLEVBQWhCLENBRFUsQ0FBWCxJQUN5QkQsRUFEOUI7QUFFSDtBQUNERSxVQUFFQyxDQUFGLElBQU9GLEtBQUssR0FBWjtBQUNIOztBQUVELFdBQU8sSUFBSVosS0FBSixDQUFVYSxDQUFWLEVBQWFGLEVBQWIsQ0FBUDtBQUNIOztBQUVELElBQUlLLDBCQUEwQjtBQUMxQkMsY0FBVSxrQkFBU1QsRUFBVCxFQUFhRSxFQUFiLEVBQWlCO0FBQ3ZCLGVBQU9GLEtBQUtFLEVBQVo7QUFDSCxLQUh5QjtBQUkxQlEsWUFBUSxnQkFBU1YsRUFBVCxFQUFhRSxFQUFiLEVBQWlCO0FBQ3JCLGVBQU9GLEtBQUtFLEVBQUwsR0FBVUYsS0FBS0UsRUFBdEI7QUFDSCxLQU55QjtBQU8xQlMsYUFBUyxpQkFBU1gsRUFBVCxFQUFhRSxFQUFiLEVBQWlCO0FBQ3RCRixjQUFNLENBQU47QUFDQSxlQUFRQSxNQUFNLENBQVAsR0FDSFEsd0JBQXdCQyxRQUF4QixDQUFpQ1QsRUFBakMsRUFBcUNFLEVBQXJDLENBREcsR0FFSE0sd0JBQXdCRSxNQUF4QixDQUErQlYsS0FBSyxDQUFwQyxFQUF1Q0UsRUFBdkMsQ0FGSjtBQUdILEtBWnlCO0FBYTFCVSxlQUFXLG1CQUFTWixFQUFULEVBQWFFLEVBQWIsRUFBaUI7QUFDeEIsWUFBSVcsSUFBSSxDQUFSO0FBQUEsWUFBV0MsSUFBSWQsRUFBZjtBQUNBLFlBQUlFLEtBQUssR0FBVCxFQUFjO0FBQ1ZZLGdCQUFJLENBQUo7QUFDQUQsZ0JBQUtiLEtBQUssSUFBTixHQUFjZSxLQUFLQyxJQUFMLENBQVVoQixFQUFWLENBQWQsR0FDRSxDQUFDLENBQUMsS0FBS0EsRUFBTCxHQUFVLEVBQVgsSUFBaUJBLEVBQWpCLEdBQXNCLENBQXZCLElBQTRCQSxFQURsQztBQUVIO0FBQ0QsZUFBT0EsS0FBSyxDQUFDLElBQUksSUFBSUUsRUFBVCxJQUFlWSxDQUFmLElBQW9CRCxJQUFJYixFQUF4QixDQUFaO0FBQ0gsS0FyQnlCO0FBc0IxQmlCLGVBQVcsbUJBQVNqQixFQUFULEVBQWFFLEVBQWIsRUFBaUI7QUFDeEIsZUFBT00sd0JBQXdCRyxPQUF4QixDQUFnQ1QsRUFBaEMsRUFBb0NGLEVBQXBDLENBQVA7QUFDSCxLQXhCeUI7QUF5QjFCa0IsZ0JBQVksb0JBQVNsQixFQUFULEVBQWFFLEVBQWIsRUFBaUI7QUFDekIsZUFBT2EsS0FBS0ksR0FBTCxDQUFTbkIsS0FBS0UsRUFBZCxDQUFQO0FBQ0gsS0EzQnlCO0FBNEIxQmtCLGVBQVcsbUJBQVNwQixFQUFULEVBQWFFLEVBQWIsRUFBaUI7QUFDeEIsZUFBT0YsS0FBS0UsRUFBTCxHQUFVLElBQUlGLEVBQUosR0FBU0UsRUFBMUI7QUFDSCxLQTlCeUI7O0FBZ0MxQjtBQUNBbUIsYUFBUyxpQkFBU3JCLEVBQVQsRUFBYUUsRUFBYixFQUFpQjtBQUN0QixlQUFPLENBQUNGLEtBQUtFLEVBQU4sSUFBWSxDQUFuQjtBQUNILEtBbkN5QjtBQW9DMUJvQixjQUFVLGtCQUFTdEIsRUFBVCxFQUFhRSxFQUFiLEVBQWlCO0FBQ3ZCLGVBQU8sSUFBSWEsS0FBS0ksR0FBTCxDQUFTbkIsS0FBS0UsRUFBTCxHQUFVLENBQW5CLENBQVg7QUFDSDtBQXRDeUIsQ0FBOUI7O0FBeUNBLEtBQUssSUFBSXFCLENBQVQsSUFBY2YsdUJBQWQsRUFBdUM7QUFDbkMsUUFBSUEsd0JBQXdCZ0IsY0FBeEIsQ0FBdUNELENBQXZDLENBQUosRUFBK0M7QUFDM0M3QixtQkFBVzZCLENBQVgsSUFBZ0I3QixXQUFXK0IsSUFBWCxDQUFnQixJQUFoQixFQUFzQmpCLHdCQUF3QmUsQ0FBeEIsQ0FBdEIsQ0FBaEI7QUFDSDtBQUNKOztrQkFFYzdCLFUiLCJmaWxlIjoiY29sb3ItYmxlbmRpbmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgQ29sb3IgPSByZXF1aXJlKFwiLi4vdHJlZS9jb2xvclwiKTtcbi8vIENvbG9yIEJsZW5kaW5nXG4vLyByZWY6IGh0dHA6Ly93d3cudzMub3JnL1RSL2NvbXBvc2l0aW5nLTFcblxuZnVuY3Rpb24gY29sb3JCbGVuZChtb2RlLCBjb2xvcjEsIGNvbG9yMikge1xuICAgIHZhciBhYiA9IGNvbG9yMS5hbHBoYSwgY2IsIC8vIGJhY2tkcm9wXG4gICAgICAgIGFzID0gY29sb3IyLmFscGhhLCBjcywgLy8gc291cmNlXG4gICAgICAgIGFyLCBjciwgciA9IFtdOyAgICAgICAgLy8gcmVzdWx0XG5cbiAgICBhciA9IGFzICsgYWIgKiAoMSAtIGFzKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDM7IGkrKykge1xuICAgICAgICBjYiA9IGNvbG9yMS5yZ2JbaV0gLyAyNTU7XG4gICAgICAgIGNzID0gY29sb3IyLnJnYltpXSAvIDI1NTtcbiAgICAgICAgY3IgPSBtb2RlKGNiLCBjcyk7XG4gICAgICAgIGlmIChhcikge1xuICAgICAgICAgICAgY3IgPSAoYXMgKiBjcyArIGFiICogKGNiIC1cbiAgICAgICAgICAgICAgICAgIGFzICogKGNiICsgY3MgLSBjcikpKSAvIGFyO1xuICAgICAgICB9XG4gICAgICAgIHJbaV0gPSBjciAqIDI1NTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IENvbG9yKHIsIGFyKTtcbn1cblxudmFyIGNvbG9yQmxlbmRNb2RlRnVuY3Rpb25zID0ge1xuICAgIG11bHRpcGx5OiBmdW5jdGlvbihjYiwgY3MpIHtcbiAgICAgICAgcmV0dXJuIGNiICogY3M7XG4gICAgfSxcbiAgICBzY3JlZW46IGZ1bmN0aW9uKGNiLCBjcykge1xuICAgICAgICByZXR1cm4gY2IgKyBjcyAtIGNiICogY3M7XG4gICAgfSxcbiAgICBvdmVybGF5OiBmdW5jdGlvbihjYiwgY3MpIHtcbiAgICAgICAgY2IgKj0gMjtcbiAgICAgICAgcmV0dXJuIChjYiA8PSAxKSA/XG4gICAgICAgICAgICBjb2xvckJsZW5kTW9kZUZ1bmN0aW9ucy5tdWx0aXBseShjYiwgY3MpIDpcbiAgICAgICAgICAgIGNvbG9yQmxlbmRNb2RlRnVuY3Rpb25zLnNjcmVlbihjYiAtIDEsIGNzKTtcbiAgICB9LFxuICAgIHNvZnRsaWdodDogZnVuY3Rpb24oY2IsIGNzKSB7XG4gICAgICAgIHZhciBkID0gMSwgZSA9IGNiO1xuICAgICAgICBpZiAoY3MgPiAwLjUpIHtcbiAgICAgICAgICAgIGUgPSAxO1xuICAgICAgICAgICAgZCA9IChjYiA+IDAuMjUpID8gTWF0aC5zcXJ0KGNiKVxuICAgICAgICAgICAgICAgIDogKCgxNiAqIGNiIC0gMTIpICogY2IgKyA0KSAqIGNiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjYiAtICgxIC0gMiAqIGNzKSAqIGUgKiAoZCAtIGNiKTtcbiAgICB9LFxuICAgIGhhcmRsaWdodDogZnVuY3Rpb24oY2IsIGNzKSB7XG4gICAgICAgIHJldHVybiBjb2xvckJsZW5kTW9kZUZ1bmN0aW9ucy5vdmVybGF5KGNzLCBjYik7XG4gICAgfSxcbiAgICBkaWZmZXJlbmNlOiBmdW5jdGlvbihjYiwgY3MpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguYWJzKGNiIC0gY3MpO1xuICAgIH0sXG4gICAgZXhjbHVzaW9uOiBmdW5jdGlvbihjYiwgY3MpIHtcbiAgICAgICAgcmV0dXJuIGNiICsgY3MgLSAyICogY2IgKiBjcztcbiAgICB9LFxuXG4gICAgLy8gbm9uLXczYyBmdW5jdGlvbnM6XG4gICAgYXZlcmFnZTogZnVuY3Rpb24oY2IsIGNzKSB7XG4gICAgICAgIHJldHVybiAoY2IgKyBjcykgLyAyO1xuICAgIH0sXG4gICAgbmVnYXRpb246IGZ1bmN0aW9uKGNiLCBjcykge1xuICAgICAgICByZXR1cm4gMSAtIE1hdGguYWJzKGNiICsgY3MgLSAxKTtcbiAgICB9XG59O1xuXG5mb3IgKHZhciBmIGluIGNvbG9yQmxlbmRNb2RlRnVuY3Rpb25zKSB7XG4gICAgaWYgKGNvbG9yQmxlbmRNb2RlRnVuY3Rpb25zLmhhc093blByb3BlcnR5KGYpKSB7XG4gICAgICAgIGNvbG9yQmxlbmRbZl0gPSBjb2xvckJsZW5kLmJpbmQobnVsbCwgY29sb3JCbGVuZE1vZGVGdW5jdGlvbnNbZl0pO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY29sb3JCbGVuZDtcbiJdfQ==